[main]
# FILTER KONFIG
# For any of Shiro’s default filters that
# have a LoginUrl property, set this Login Page.
shiro.loginUrl = /Login.jsf
filterChainResolver.globalFilters = invalidRequest


# Eigene Filter deklarieren
meinFilter = de.marcel.restaurant.web.security.ModifiedAuthenticationFilter
meinFilter.loginUrl = /Login.jsf

# CACHING
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
# Okay für JVM Anwendungen die auf einem Server laufen, bei Clustern: ClusteredCacheManager

# DATASOURCE
ds = org.apache.shiro.jndi.JndiObjectFactory
ds.resourceName = java:jboss/datasources/RestaurantAppDSmariaDB_auth


# Normale Connection ohne SSL zu Authtest
# dataSource.jdbcUrl = jdbc:mariadb://localhost:3306/authtest
# ds.url=jdbc:mariadb://localhost:3306/authtest
# ds.user = glass
# ds.password = glass
# ds.databaseName = authtest

# Für MariaDB mit SSL ohne Zert.prüfung
# ds.url:jdbc:mariadb://localhost/myDb?user=myUser&password=MyPwd&useSSL=true&trustServerCertificate=true
# Für MariaDB mit SSL mit Zertprüfung des DB Servers. Zert muss im Classpath liegen.
# ds.url:jdbc:mariadb://localhost/datenbankname?user=username&password=geheim&serverSslCert=classpath:relative/path/to/cert.pem

# REALM
# jdbcRealm = shiroTestClasses.MyJdbcRealm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $ds
jdbcRealm.authenticationQuery=SELECT password, salt FROM users WHERE users.email=?
jdbcRealm.userRolesQuery=SELECT gruppen.groupname FROM gruppen WHERE gruppen.email=?
;# Permissions werden nicht genutzt, nur PW und Role
jdbcRealm.permissionsLookupEnabled=false
;# Die Einstellung bewirkt, dass er bei der Passwort Query in der zweiten Spalte nach dem Salt sucht
jdbcRealm.saltStyle=COLUMN



# SECURITY MANAGER
securityManager.cacheManager = $cacheManager
securityManager.realm = $jdbcRealm


# CREDENTIAL ENTSCHLÜSSELUNG (Verschlüsselung geschieht in der App)
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.storedCredentialsHexEncoded = false
# This next property is only needed in Shiro 1.0\.  Remove it in 1.1 and later:
credentialsMatcher.hashSalted = true
# Iterationen: In Prod. mit 1024 versuchen
# Anpassen in LoginController
credentialsMatcher.hashIterations = 1
credentialsMatcher.hashAlgorithmName = SHA-256
jdbcRealm.credentialsMatcher = $credentialsMatcher

authc.enabled = true

[urls]
# FILTERING
# The token on the left of the equals sign (=) is an Ant-style path expression relative to your web application’s context root.
# if you deploy your application one day to, say, www.somehost.com/myapp and then later deploy it to www.anotherhost.com (no ‘myapp’ sub-path), the pattern matching will still work. All paths are relative to the HttpServletRequest.getContextPath() value.
# Wildfly Context Root /restaurant-web-1
# logout Filter für Requests auf logout
# Dies sind leere Filter, sie lassen alles durch
# Login.jsf konfiguriert den authc Filter mit einer Weiterleitungs url die aufgerufen wird, wenn ein anonymer User eine geschützte Seite besuchen will
/Login.jsf = meinFilter
/logout = logout
# HTTPS wird verlangt. Das ist HTTP Strict Transport Security (HSTS). Es gehört aber noch weitre Konfiguration dazu, damit es funktioniert.
# /Login.jsf = ssl[443]

# Gleicher Filter wie Login.jsf, jedoch wird damit tatsächlich etwas gesperrt, alles unterhalb account nur für angemeldete oder remembered Benutzer
# Nach Denial und folgendem erfolgreichen Login wird automatisch auf die angeforderte Ressource weitergeleitet. Nice.
;/account/** = authc
# Mehrere Rollen als ODER Verknüpfung möglich
;/tenforward/** = roles[Captains], roles[Officers]

# SCHÜTZEN VON RESOURCE VERZEICHNISSEN
# Das resource oder images-Verzeichnis in dem zu ladende Pics liegen, kann nur halb gesperrt werden.
# Ruft man Images auf, wird der Zugriff verweigert. Ruft man images/genaueBezeichnung.jpg auf,
# kann das Bild geladen werden!
;/images = roles[noOne!]
# Fix für Deeplink: Erzeugt 404 Error bei direktem Aufruf von Bildern
;/images/** = invalidRequest
#http://localhost:8080/tenforward/tenforward.jsp

########## Restaurant Security Config ################
/UserList.jsf = anon
/UserCreate.jsf = anon

# hier ist wichtig nur ein Sternchen zu nutzen, sonst findet er die Resourcen nicht
# /*= meinFilter
/*= anon

/javax.faces.resource/bootstrap/* = anon
/javax.faces.resource/* = anon

# Websockets Security
/javax.faces.push/* = anon

